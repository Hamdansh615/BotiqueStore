// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot 1`] = `
<View
  style={
    {
      "flexBasis": 0,
      "flexGrow": 1,
    }
  }
>
  <RCTScrollView
    ListFooterComponent={
      {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    data={
      [
        {
          "id": "id1",
          "name": "name1",
        },
        {
          "id": "id2",
          "name": "name2",
        },
        {
          "id": "id3",
          "name": "name3",
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshing={false}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={false}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="item-id1"
        >
          <Text>
            name1
          </Text>
        </View>
      </View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={false}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="item-id2"
        >
          <Text>
            name2
          </Text>
        </View>
      </View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={false}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="item-id3"
        >
          <Text>
            name3
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
      />
    </View>
  </RCTScrollView>
</View>
`;
